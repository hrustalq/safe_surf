"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { Shield, ArrowLeft, CheckCircle, AlertTriangle, XCircle, Clock, Activity, Globe, Server, Zap } from "lucide-react";
import { Button } from "~/components/ui/button";
import { Card } from "~/components/ui/card";
import { Badge } from "~/components/ui/badge";
import { Progress } from "~/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "~/components/ui/tabs";

interface ServiceStatus {
  name: string;
  status: "operational" | "degraded" | "outage";
  uptime: number;
  responseTime: number;
  lastChecked: string;
}

interface ServerStatus {
  location: string;
  country: string;
  flag: string;
  status: "online" | "maintenance" | "offline";
  load: number;
  ping: number;
  uptime: number;
}

export default function StatusPage() {
  const [services] = useState<ServiceStatus[]>([
    { name: "VPN –°–µ—Ä–≤–µ—Ä—ã", status: "operational", uptime: 99.98, responseTime: 45, lastChecked: "2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥" },
    { name: "–í–µ–±-—Å–∞–π—Ç", status: "operational", uptime: 99.99, responseTime: 120, lastChecked: "1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥" },
    { name: "API", status: "operational", uptime: 99.95, responseTime: 85, lastChecked: "30 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥" },
    { name: "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", status: "operational", uptime: 99.97, responseTime: 65, lastChecked: "1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥" },
    { name: "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", status: "operational", uptime: 99.94, responseTime: 150, lastChecked: "2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥" },
    { name: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", status: "operational", uptime: 99.92, responseTime: 200, lastChecked: "5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥" },
  ]);

  const [servers] = useState<ServerStatus[]>([
    { location: "–ì–µ—Ä–º–∞–Ω–∏—è", country: "DE", flag: "üá©üá™", status: "online", load: 23, ping: 15, uptime: 99.99 },
    { location: "–°–®–ê (–ù—å—é-–ô–æ—Ä–∫)", country: "US", flag: "üá∫üá∏", status: "online", load: 52, ping: 85, uptime: 99.95 },
    { location: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", country: "NL", flag: "üá≥üá±", status: "online", load: 18, ping: 12, uptime: 99.98 },
    { location: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", country: "GB", flag: "üá¨üáß", status: "online", load: 45, ping: 28, uptime: 99.97 },
    { location: "–°–∏–Ω–≥–∞–ø—É—Ä", country: "SG", flag: "üá∏üá¨", status: "online", load: 42, ping: 180, uptime: 99.94 },
    { location: "–Ø–ø–æ–Ω–∏—è", country: "JP", flag: "üáØüáµ", status: "maintenance", load: 0, ping: 0, uptime: 99.91 },
    { location: "–§—Ä–∞–Ω—Ü–∏—è", country: "FR", flag: "üá´üá∑", status: "online", load: 32, ping: 22, uptime: 99.96 },
    { location: "–ö–∞–Ω–∞–¥–∞", country: "CA", flag: "üá®üá¶", status: "online", load: 29, ping: 98, uptime: 99.93 },
  ]);

  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "operational":
      case "online":
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case "degraded":
      case "maintenance":
        return <AlertTriangle className="h-4 w-4 text-yellow-600" />;
      case "outage":
      case "offline":
        return <XCircle className="h-4 w-4 text-red-600" />;
      default:
        return <Clock className="h-4 w-4 text-gray-600" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "operational":
      case "online":
        return "text-green-600 bg-green-100 dark:bg-green-900/20 dark:text-green-400";
      case "degraded":
      case "maintenance":
        return "text-yellow-600 bg-yellow-100 dark:bg-yellow-900/20 dark:text-yellow-400";
      case "outage":
      case "offline":
        return "text-red-600 bg-red-100 dark:bg-red-900/20 dark:text-red-400";
      default:
        return "text-gray-600 bg-gray-100 dark:bg-gray-900/20 dark:text-gray-400";
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case "operational":
      case "online":
        return "–†–∞–±–æ—Ç–∞–µ—Ç";
      case "degraded":
        return "–ó–∞–º–µ–¥–ª–µ–Ω–æ";
      case "maintenance":
        return "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ";
      case "outage":
      case "offline":
        return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ";
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  };

  const overallStatus = services.every(s => s.status === "operational") ? "operational" : 
                       services.some(s => s.status === "outage") ? "outage" : "degraded";

  const incidentHistory = [
    {
      date: "2024-01-15",
      title: "–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ê–∑–∏–∏",
      status: "resolved",
      duration: "2 —á–∞—Å–∞",
      description: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö –≤ –°–∏–Ω–≥–∞–ø—É—Ä–µ –∏ –Ø–ø–æ–Ω–∏–∏",
    },
    {
      date: "2024-01-10",
      title: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º",
      status: "resolved", 
      duration: "30 –º–∏–Ω—É—Ç",
      description: "–ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π —Ç—Ä–∞—Ñ–∏–∫–∞, –∑–∞—Ç—Ä–æ–Ω—É–ª–∏ 5% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    },
    {
      date: "2024-01-05",
      title: "–ó–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ API",
      status: "resolved",
      duration: "1 —á–∞—Å",
      description: "–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/10">
      {/* Header */}
      <div className="border-b bg-background/95 backdrop-blur">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Shield className="h-6 w-6 text-primary" />
              <span className="font-bold text-lg">SafeSurf VPN</span>
            </div>
            <Button variant="outline" asChild>
              <Link href="/">
                <ArrowLeft className="h-4 w-4 mr-2" />
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Link>
            </Button>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-16">
        <div className="max-w-6xl mx-auto">
          {/* Page Title & Overall Status */}
          <div className="text-center mb-12">
            <h1 className="text-4xl font-bold text-foreground mb-4">
              –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            </h1>
            <div className="flex items-center justify-center gap-3 mb-4">
              {getStatusIcon(overallStatus)}
              <span className="text-lg font-medium">
                {overallStatus === "operational" ? "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" :
                 overallStatus === "degraded" ? "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ" :
                 "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ"}
              </span>
            </div>
            <p className="text-muted-foreground">
              –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {currentTime.toLocaleTimeString('ru-RU')} MSK
            </p>
          </div>

          <Tabs defaultValue="services" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="services">–°–µ—Ä–≤–∏—Å—ã</TabsTrigger>
              <TabsTrigger value="servers">–°–µ—Ä–≤–µ—Ä—ã</TabsTrigger>
              <TabsTrigger value="history">–ò—Å—Ç–æ—Ä–∏—è</TabsTrigger>
            </TabsList>

            <TabsContent value="services" className="space-y-6">
              {/* Services Status */}
              <div className="grid gap-4">
                {services.map((service, index) => (
                  <Card key={index} className="p-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="flex items-center gap-2">
                          {getStatusIcon(service.status)}
                          <h3 className="font-semibold text-foreground">{service.name}</h3>
                        </div>
                        <Badge className={getStatusColor(service.status)}>
                          {getStatusText(service.status)}
                        </Badge>
                      </div>
                      
                      <div className="flex items-center gap-8 text-sm text-muted-foreground">
                        <div className="flex items-center gap-2">
                          <Activity className="h-4 w-4" />
                          <span>{service.uptime}% Uptime</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Zap className="h-4 w-4" />
                          <span>{service.responseTime}ms</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Clock className="h-4 w-4" />
                          <span>{service.lastChecked}</span>
                        </div>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>

              {/* Statistics */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <Card className="p-6 text-center">
                  <div className="text-3xl font-bold text-green-600 mb-2">99.97%</div>
                  <div className="text-sm text-muted-foreground">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
                </Card>
                <Card className="p-6 text-center">
                  <div className="text-3xl font-bold text-blue-600 mb-2">85ms</div>
                  <div className="text-sm text-muted-foreground">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞</div>
                </Card>
                <Card className="p-6 text-center">
                  <div className="text-3xl font-bold text-purple-600 mb-2">0</div>
                  <div className="text-sm text-muted-foreground">–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã</div>
                </Card>
                <Card className="p-6 text-center">
                  <div className="text-3xl font-bold text-orange-600 mb-2">24/7</div>
                  <div className="text-sm text-muted-foreground">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</div>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="servers" className="space-y-6">
              {/* Servers Status */}
              <div className="grid gap-4">
                {servers.map((server, index) => (
                  <Card key={index} className="p-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <span className="text-2xl">{server.flag}</span>
                        <div>
                          <h3 className="font-semibold text-foreground">{server.location}</h3>
                          <div className="flex items-center gap-2 mt-1">
                            {getStatusIcon(server.status)}
                            <Badge className={getStatusColor(server.status)}>
                              {getStatusText(server.status)}
                            </Badge>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-8 text-sm">
                        {server.status !== "maintenance" && (
                          <>
                            <div>
                              <div className="text-muted-foreground mb-1">–ù–∞–≥—Ä—É–∑–∫–∞</div>
                              <div className="flex items-center gap-2">
                                <Progress value={server.load} className="w-16 h-2" />
                                <span className="font-medium">{server.load}%</span>
                              </div>
                            </div>
                            <div>
                              <div className="text-muted-foreground mb-1">–ü–∏–Ω–≥</div>
                              <div className="font-medium text-center">{server.ping}ms</div>
                            </div>
                          </>
                        )}
                        <div>
                          <div className="text-muted-foreground mb-1">Uptime</div>
                          <div className="font-medium text-center">{server.uptime}%</div>
                        </div>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>

              {/* Server Statistics */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
                <Card className="p-6 text-center">
                  <Globe className="h-8 w-8 text-primary mx-auto mb-2" />
                  <div className="text-2xl font-bold text-foreground mb-1">{servers.length}</div>
                  <div className="text-sm text-muted-foreground">–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤</div>
                </Card>
                <Card className="p-6 text-center">
                  <CheckCircle className="h-8 w-8 text-green-600 mx-auto mb-2" />
                  <div className="text-2xl font-bold text-foreground mb-1">
                    {servers.filter(s => s.status === "online").length}
                  </div>
                  <div className="text-sm text-muted-foreground">–û–Ω–ª–∞–π–Ω</div>
                </Card>
                <Card className="p-6 text-center">
                  <AlertTriangle className="h-8 w-8 text-yellow-600 mx-auto mb-2" />
                  <div className="text-2xl font-bold text-foreground mb-1">
                    {servers.filter(s => s.status === "maintenance").length}
                  </div>
                  <div className="text-sm text-muted-foreground">–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏</div>
                </Card>
                <Card className="p-6 text-center">
                  <Server className="h-8 w-8 text-blue-600 mx-auto mb-2" />
                  <div className="text-2xl font-bold text-foreground mb-1">
                    {Math.round(servers.filter(s => s.status === "online").reduce((acc, s) => acc + s.load, 0) / servers.filter(s => s.status === "online").length)}%
                  </div>
                  <div className="text-sm text-muted-foreground">–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞</div>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="history" className="space-y-6">
              {/* Incident History */}
              <Card className="p-6">
                <h2 className="text-xl font-semibold text-foreground mb-6">
                  –ò—Å—Ç–æ—Ä–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
                </h2>
                <div className="space-y-4">
                  {incidentHistory.map((incident, index) => (
                    <div key={index} className="border-l-2 border-green-500 pl-4 pb-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-medium text-foreground">{incident.title}</h3>
                        <div className="flex items-center gap-2">
                          <Badge className="text-green-600 bg-green-100 dark:bg-green-900/20 dark:text-green-400">
                            <CheckCircle className="h-3 w-3 mr-1" />
                            –†–µ—à–µ–Ω–æ
                          </Badge>
                          <span className="text-sm text-muted-foreground">{incident.duration}</span>
                        </div>
                      </div>
                      <p className="text-sm text-muted-foreground mb-1">{incident.description}</p>
                      <p className="text-xs text-muted-foreground">
                        {new Date(incident.date).toLocaleDateString('ru-RU', { 
                          year: 'numeric', 
                          month: 'long', 
                          day: 'numeric' 
                        })}
                      </p>
                    </div>
                  ))}
                </div>
              </Card>

              {/* Uptime Graph Placeholder */}
              <Card className="p-6">
                <h2 className="text-xl font-semibold text-foreground mb-4">
                  –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π)
                </h2>
                <div className="h-32 bg-gradient-to-r from-green-500/20 to-green-600/20 rounded-lg flex items-center justify-center">
                  <p className="text-muted-foreground">–ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (99.97% —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã)</p>
                </div>
              </Card>
            </TabsContent>
          </Tabs>

          {/* Subscribe to Updates */}
          <Card className="p-8 mt-12 bg-primary/5 border-primary/20 text-center">
            <h3 className="text-xl font-semibold text-foreground mb-2">
              –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            </h3>
            <p className="text-muted-foreground mb-6">
              –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –∏ –ø–ª–∞–Ω–æ–≤–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button asChild>
                <a href="https://t.me/safesurfvpn" target="_blank" rel="noopener noreferrer">
                  Telegram –∫–∞–Ω–∞–ª
                </a>
              </Button>
              <Button variant="outline" asChild>
                <Link href="/contact">Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Link>
              </Button>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
}