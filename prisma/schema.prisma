// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    subscriptions Subscription[]
    passwordResetTokens PasswordResetToken[]
    xUIClientId   String?   // 3x-ui client identifier
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PasswordResetToken {
    id        String   @id @default(cuid())
    token     String   @unique @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires   DateTime
    createdAt DateTime @default(now())
    
    @@index([userId])
    @@index([token])
}

// VPN Service Models

model VpnPlan {
    id              String        @id @default(cuid())
    name            String        // e.g., "Basic", "Premium", "Professional"
    nameRu          String        // Russian name for the plan
    description     String        // Plan description
    descriptionRu   String        // Russian description
    features        String        // JSON array of features
    featuresRu      String        // Russian features
    price           Decimal       // Monthly price
    currency        String        @default("USD")
    durationDays    Int          // Plan duration in days
    maxDevices      Int          // Max simultaneous connections
    maxBandwidth    BigInt?      // Monthly bandwidth limit in bytes (null = unlimited)
    protocols       String       // JSON array of supported protocols (vless, vmess, etc.)
    isActive        Boolean      @default(true)
    sortOrder       Int          @default(0)
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    subscriptions   Subscription[]
}

model Subscription {
    id              String           @id @default(cuid())
    userId          String
    planId          String
    status          SubscriptionStatus
    startDate       DateTime         @default(now())
    endDate         DateTime
    isActive        Boolean          @default(true)
    paymentId       String?          // External payment system reference
    xUIInboundId    String?          // 3x-ui inbound identifier
    connectionInfo  String?          // JSON with connection details (configs, keys, etc.)
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    plan            VpnPlan          @relation(fields: [planId], references: [id])
    
    @@index([userId])
    @@index([status])
}

model XUIServer {
    id            String    @id @default(cuid())
    name          String    // Server display name
    location      String    // Server location
    locationRu    String    // Russian location name
    host          String    // Server hostname/IP
    port          Int       @default(54321) // 3x-ui panel port
    username      String    // 3x-ui admin username
    password      String    // 3x-ui admin password
    apiUrl        String    // Full API URL
    isActive      Boolean   @default(true)
    maxClients    Int       @default(100) // Maximum clients per server
    currentLoad   Int       @default(0)   // Current number of active clients
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

enum SubscriptionStatus {
    ACTIVE
    EXPIRED
    CANCELLED
    PENDING
}
